os: linux
dist: bionic
language: python

services:
  - docker
  - mongodb

before_install:
  - sudo apt-get install -y xmlsec1

install:
  - pip install tox
  - pip install tox-travis

script:
  - tox -r

jobs:
  allow_failures:
    - python: 3.9-dev
  include:
    - python: 3.6
    - python: 3.7
    - python: 3.8
    - python: pypy3

    - stage: Expose env-var information
      script: |
        cat <<EOF
        TRAVIS_BUILD_ID: $TRAVIS_BUILD_ID
        TRAVIS_BUILD_STAGE_NAME: $TRAVIS_BUILD_STAGE_NAME
        TRAVIS_BUILD_NUMBER: $TRAVIS_BUILD_NUMBER
        TRAVIS_BUILD_WEB_URL: $TRAVIS_BUILD_WEB_URL

        TRAVIS_JOB_ID: $TRAVIS_JOB_ID
        TRAVIS_JOB_NAME: $TRAVIS_JOB_NAME
        TRAVIS_JOB_NUMBER: $TRAVIS_JOB_NUMBER
        TRAVIS_JOB_WEB_URL: $TRAVIS_JOB_WEB_URL

        TRAVIS_DIST: $TRAVIS_DIST
        TRAVIS_OS_NAME: $TRAVIS_OS_NAME
        TRAVIS_CPU_ARCH: $TRAVIS_CPU_ARCH
        TRAVIS_PYTHON_VERSION: $TRAVIS_PYTHON_VERSION
        TRAVIS_SECURE_ENV_VARS: $TRAVIS_SECURE_ENV_VARS

        TRAVIS_EVENT_TYPE: $TRAVIS_EVENT_TYPE
        TRAVIS_REPO_SLUG: $TRAVIS_REPO_SLUG
        TRAVIS_BRANCH: $TRAVIS_BRANCH
        TRAVIS_COMMIT: $TRAVIS_COMMIT
        TRAVIS_COMMIT_RANGE: $TRAVIS_COMMIT_RANGE
        TRAVIS_TAG: $TRAVIS_TAG
        TRAVIS_PULL_REQUEST: $TRAVIS_PULL_REQUEST
        TRAVIS_PULL_REQUEST_BRANCH: $TRAVIS_PULL_REQUEST_BRANCH
        TRAVIS_PULL_REQUEST_SHA: $TRAVIS_PULL_REQUEST_SHA
        TRAVIS_PULL_REQUEST_SLUG: $TRAVIS_PULL_REQUEST_SLUG

        DOCKER_REPO: $DOCKER_REPO
        DOCKER_TAG_COMMIT: $DOCKER_TAG_COMMIT
        DOCKER_TAG_BRANCH: $DOCKER_TAG_BRANCH
        DOCKER_TAG_PR_BRANCH: $DOCKER_TAG_PR_BRANCH
        DOCKER_TAG_PR_NUM: $DOCKER_TAG_PR_NUM
        DOCKER_TAG_GITTAG: $DOCKER_TAG_GITTAG
        DOCKER_TAG_LATEST: $DOCKER_TAG_LATEST
        EOF

    - stage: Build docker image by commit and deploy on DockerHub
      before_install: skip
      install: skip
      script:
        - set -e
        - test "$TRAVIS_SECURE_ENV_VARS" = "true" || exit 0
        - docker build -f Dockerfile -t "$DOCKER_TAG_COMMIT" .
        - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push "$DOCKER_TAG_COMMIT"

    - stage: Tag docker image with branch name
      if: type = push AND branch IS present
      before_install: skip
      install: skip
      script:
        - set -e
        - test "$TRAVIS_SECURE_ENV_VARS" = "true" || exit 0
        - docker pull "$DOCKER_TAG_COMMIT"
        - docker tag "$DOCKER_TAG_COMMIT" "$DOCKER_TAG_BRANCH"
        - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push "$DOCKER_TAG_BRANCH"

    - stage: Tag docker image with pull-request branch name
      if: type = pull_request AND head_branch IS present
      before_install: skip
      install: skip
      script:
        - set -e
        - test "$TRAVIS_SECURE_ENV_VARS" = "true" || exit 0
        - docker pull "$DOCKER_TAG_COMMIT"
        - docker tag "$DOCKER_TAG_COMMIT" "$DOCKER_TAG_PR_BRANCH"
        - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push "$DOCKER_TAG_PR_BRANCH"

    - stage: Tag docker image with pull-request number
      if: type = pull_request
      before_install: skip
      install: skip
      script:
        - set -e
        - test "$TRAVIS_SECURE_ENV_VARS" = "true" || exit 0
        - docker pull "$DOCKER_TAG_COMMIT"
        - docker tag "$DOCKER_TAG_COMMIT" "$DOCKER_TAG_PR_NUM"
        - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push "$DOCKER_TAG_PR_NUM"

    - stage: Tag docker image with git-tag
      if: type = push AND tag IS present
      before_install: skip
      install: skip
      script:
        - set -e
        - test "$TRAVIS_SECURE_ENV_VARS" = "true" || exit 0
        - docker pull "$DOCKER_TAG_COMMIT"
        - docker tag "$DOCKER_TAG_COMMIT" "$DOCKER_TAG_GITTAG"
        - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push "$DOCKER_TAG_GITTAG"

    - stage: Tag docker image as latest
      if: type = push AND branch = master
      before_install: skip
      install: skip
      script:
        - set -e
        - test "$TRAVIS_SECURE_ENV_VARS" = "true" || exit 0
        - docker pull "$DOCKER_TAG_COMMIT"
        - docker tag "$DOCKER_TAG_COMMIT" "$DOCKER_TAG_LATEST"
        - echo "$DOCKER_PASS" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push "$DOCKER_TAG_LATEST"

    - stage: Deploy new release on GitHub
      if: type = push AND tag IS present
      before_install: skip
      install: skip
      script: skip
      deploy:
        - provider: releases
          token: "$GITHUB_RELEASE_TOKEN"
          on:
            repo: IdentityPython/SATOSA
            tags: true

    - stage: Deploy new release on PyPI
      if: type = push AND tag IS present
      before_install: skip
      install: skip
      script: skip
      deploy:
        - provider: pypi
          distributions: sdist bdist_wheel
          username: "__token__"
          password: "$PYPI_RELEASE_TOKEN"
          on:
            repo: IdentityPython/SATOSA
            tags: true

env:
  global:
    - DOCKER_REPO: "satosa/satosa"
    - DOCKER_TAG_COMMIT: "${DOCKER_REPO}:${TRAVIS_COMMIT}"
    - DOCKER_TAG_BRANCH: "${DOCKER_REPO}:${TRAVIS_BRANCH}"
    - DOCKER_TAG_PR_BRANCH: "${DOCKER_REPO}:PR${TRAVIS_PULL_REQUEST_BRANCH}"
    - DOCKER_TAG_PR_NUM: "${DOCKER_REPO}:PR${TRAVIS_PULL_REQUEST}"
    - DOCKER_TAG_GITTAG: "${DOCKER_REPO}:${TRAVIS_TAG:-NO_TAG}"
    - DOCKER_TAG_LATEST: "${DOCKER_REPO}:latest"
